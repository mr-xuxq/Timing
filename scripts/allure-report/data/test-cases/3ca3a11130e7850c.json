{
  "uid" : "3ca3a11130e7850c",
  "name" : "test_interaction",
  "fullName" : "test_021_channelCheck.Test_channelCheck#test_interaction",
  "historyId" : "7756e9d1712a198e75d266281d84377e",
  "time" : {
    "start" : 1587058666629,
    "stop" : 1587058715368,
    "duration" : 48739
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <scripts.test_021_channelCheck.Test_channelCheck object at 0x0000015C2CF71128>\n\n    @allure.story('互动通知channel')\n    def test_interaction(self):\n        with allure.step('进入消息页面'):\n            self.page.message().click_messageBtn()\n    \n        with allure.step('滑动寻找互动通知'):\n            i = 0\n            while i < 3:\n>               if self.page.message().check_interaction()== True:\n\ntest_021_channelCheck.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\message_interaction\\message_page.py:86: in check_interaction\n    if self.find_element(self.interaction, timeout=2, poll=1) == \"\":\n..\\base\\base_action.py:22: in find_element\n    element = WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(feature_by, feature_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"69f0dbe1-c2cd-4c83-83f8-052adf3230ec\")>\nmethod = <function BaseAction.find_element.<locals>.<lambda> at 0x0000015C2CF4A510>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <scripts.test_021_channelCheck.Test_channelCheck object at 0x0000015C2CF71128>\n\n    @allure.story('互动通知channel')\n    def test_interaction(self):\n        with allure.step('进入消息页面'):\n            self.page.message().click_messageBtn()\n    \n        with allure.step('滑动寻找互动通知'):\n            i = 0\n            while i < 3:\n>               if self.page.message().check_interaction()== True:\n\ntest_021_channelCheck.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\message_interaction\\message_page.py:86: in check_interaction\n    if self.find_element(self.interaction, timeout=2, poll=1) == \"\":\n..\\base\\base_action.py:22: in find_element\n    element = WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(feature_by, feature_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"69f0dbe1-c2cd-4c83-83f8-052adf3230ec\")>\nmethod = <function BaseAction.find_element.<locals>.<lambda> at 0x0000015C2CF4A510>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ {
      "name" : "进入消息页面",
      "time" : {
        "start" : 1587058666629,
        "stop" : 1587058684069,
        "duration" : 17440
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "滑动寻找互动通知",
      "time" : {
        "start" : 1587058684069,
        "stop" : 1587058715368,
        "duration" : 31299
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"D:\\jenkins\\workspace\\Timing\\scripts\\test_021_channelCheck.py\", line 45, in test_interaction\n    if self.page.message().check_interaction()== True:\n  File \"D:\\jenkins\\workspace\\Timing\\Pages\\message_interaction\\message_page.py\", line 86, in check_interaction\n    if self.find_element(self.interaction, timeout=2, poll=1) == \"\":\n  File \"D:\\jenkins\\workspace\\Timing\\base\\base_action.py\", line 22, in find_element\n    element = WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(feature_by, feature_value))\n  File \"d:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "消息页channel展示"
  }, {
    "name" : "story",
    "value" : "互动通知channel"
  }, {
    "name" : "suite",
    "value" : "test_021_channelCheck"
  }, {
    "name" : "subSuite",
    "value" : "Test_channelCheck"
  }, {
    "name" : "host",
    "value" : "PV-X00232293"
  }, {
    "name" : "thread",
    "value" : "3648-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_021_channelCheck"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "3ca3a11130e7850c.json",
  "parameterValues" : [ ]
}