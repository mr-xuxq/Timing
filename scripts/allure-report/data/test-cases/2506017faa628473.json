{
  "uid" : "2506017faa628473",
  "name" : "test_studyTimeEnough",
  "fullName" : "test_041_studyTime.Test_studyTime#test_studyTimeEnough",
  "historyId" : "70d7f22222b00c9c58e75e109c489323",
  "time" : {
    "start" : 1616937323642,
    "stop" : 1616937482228,
    "duration" : 158586
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message:",
  "statusTrace" : "self = <scripts.test_041_studyTime.Test_studyTime object at 0x0000021ACA25A0D0>\n\n    def test_studyTimeEnough(self):\n        with allure.step('进入更多页'):\n            self.page.shouye().click_mainMoreBtn()\n        with allure.step('点击自律工具'):\n            time.sleep(2)\n            self.page.more().click_studyToolBtn()\n        with allure.step('点击普通计时'):\n            self.page.timing().click_normalTiming()\n        with allure.step('输入学习内容'):\n            self.page.timing().input_normalLearningTargetBox(12345)\n        with allure.step('点击设置按钮'):\n            self.page.timing().click_studySettingBtn()\n        with allure.step('设置学习时长'):\n            time.sleep(3)\n            self.page.more().swipeByTime()\n        with allure.step('点击设置完成按钮'):\n            self.page.timing().click_studySettingsuccessBtn()\n        with allure.step('点击开始学习'):\n            self.page.timing().click_startTimingBtn()\n        with allure.step('暂停学习'):\n            time.sleep(2)\n            self.page.classic_timing().click_timingPause()\n            time.sleep(2)\n        with allure.step('点击继续'):\n            self.page.classic_timing().click_timingContinue()\n        with allure.step('判断时间到了结束弹窗'):\n            time.sleep(60)\n            assert self.page.classic_timing().check_timingDialog() == True\n        with allure.step('点击我知道了'):\n            self.page.classic_timing().click_timingDialog()\n        with allure.step('点击再学30分钟'):\n            time.sleep(1)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n            time.sleep(1)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n            self.page.classic_timing().click_timingAgain_30()\n            time.sleep(2)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n            time.sleep(1)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n        with allure.step('点击结束'):\n            self.page.classic_timing().click_timingEnd()\n        with allure.step('确认结束'):\n            self.page.classic_timing().click_timingEndYes()\n        with allure.step('检查是否有计时结束提示框'):\n            time.sleep(5)\n            self.page.classic_timing().tapScreen(0.5,0.63)\n            time.sleep(1)\n            if self.page.activity().check_backBtn() == True:\n                self.page.activity().click_back()\n            else:\n>               self.page.classic_timing().tapScreen(0.5,0.63)\n\ntest_041_studyTime.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\timed_learning\\classic_timing_page.py:124: in tapScreen\n    self.tapOperat(x,y)\n..\\base\\base_action.py:72: in tapOperat\n    l = self.getSize()\n..\\base\\base_action.py:51: in getSize\n    x = self.driver.get_window_size()['width']\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1110: in get_window_size\n    size = self.execute(command, {'windowHandle': windowHandle})\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000021ACA3ADE80>\nresponse = {'status': 404, 'value': '{\"sessionId\":null,\"status\":6,\"value\":\"\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message:\n\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message:",
    "statusTrace" : "self = <scripts.test_041_studyTime.Test_studyTime object at 0x0000021ACA25A0D0>\n\n    def test_studyTimeEnough(self):\n        with allure.step('进入更多页'):\n            self.page.shouye().click_mainMoreBtn()\n        with allure.step('点击自律工具'):\n            time.sleep(2)\n            self.page.more().click_studyToolBtn()\n        with allure.step('点击普通计时'):\n            self.page.timing().click_normalTiming()\n        with allure.step('输入学习内容'):\n            self.page.timing().input_normalLearningTargetBox(12345)\n        with allure.step('点击设置按钮'):\n            self.page.timing().click_studySettingBtn()\n        with allure.step('设置学习时长'):\n            time.sleep(3)\n            self.page.more().swipeByTime()\n        with allure.step('点击设置完成按钮'):\n            self.page.timing().click_studySettingsuccessBtn()\n        with allure.step('点击开始学习'):\n            self.page.timing().click_startTimingBtn()\n        with allure.step('暂停学习'):\n            time.sleep(2)\n            self.page.classic_timing().click_timingPause()\n            time.sleep(2)\n        with allure.step('点击继续'):\n            self.page.classic_timing().click_timingContinue()\n        with allure.step('判断时间到了结束弹窗'):\n            time.sleep(60)\n            assert self.page.classic_timing().check_timingDialog() == True\n        with allure.step('点击我知道了'):\n            self.page.classic_timing().click_timingDialog()\n        with allure.step('点击再学30分钟'):\n            time.sleep(1)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n            time.sleep(1)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n            self.page.classic_timing().click_timingAgain_30()\n            time.sleep(2)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n            time.sleep(1)\n            self.page.classic_timing().tapScreen(0.08, 0.966)\n        with allure.step('点击结束'):\n            self.page.classic_timing().click_timingEnd()\n        with allure.step('确认结束'):\n            self.page.classic_timing().click_timingEndYes()\n        with allure.step('检查是否有计时结束提示框'):\n            time.sleep(5)\n            self.page.classic_timing().tapScreen(0.5,0.63)\n            time.sleep(1)\n            if self.page.activity().check_backBtn() == True:\n                self.page.activity().click_back()\n            else:\n>               self.page.classic_timing().tapScreen(0.5,0.63)\n\ntest_041_studyTime.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\timed_learning\\classic_timing_page.py:124: in tapScreen\n    self.tapOperat(x,y)\n..\\base\\base_action.py:72: in tapOperat\n    l = self.getSize()\n..\\base\\base_action.py:51: in getSize\n    x = self.driver.get_window_size()['width']\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1110: in get_window_size\n    size = self.execute(command, {'windowHandle': windowHandle})\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:31: in check_response\n    raise wde\nc:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000021ACA3ADE80>\nresponse = {'status': 404, 'value': '{\"sessionId\":null,\"status\":6,\"value\":\"\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message:\n\nc:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException",
    "steps" : [ {
      "name" : "进入更多页",
      "time" : {
        "start" : 1616937323643,
        "stop" : 1616937327643,
        "duration" : 4000
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击自律工具",
      "time" : {
        "start" : 1616937327643,
        "stop" : 1616937329956,
        "duration" : 2313
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击普通计时",
      "time" : {
        "start" : 1616937329956,
        "stop" : 1616937330929,
        "duration" : 973
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "输入学习内容",
      "time" : {
        "start" : 1616937330929,
        "stop" : 1616937336108,
        "duration" : 5179
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击设置按钮",
      "time" : {
        "start" : 1616937336108,
        "stop" : 1616937336853,
        "duration" : 745
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "设置学习时长",
      "time" : {
        "start" : 1616937336853,
        "stop" : 1616937340107,
        "duration" : 3254
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击设置完成按钮",
      "time" : {
        "start" : 1616937340107,
        "stop" : 1616937344253,
        "duration" : 4146
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击开始学习",
      "time" : {
        "start" : 1616937344253,
        "stop" : 1616937345678,
        "duration" : 1425
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "暂停学习",
      "time" : {
        "start" : 1616937345678,
        "stop" : 1616937350115,
        "duration" : 4437
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击继续",
      "time" : {
        "start" : 1616937350115,
        "stop" : 1616937350390,
        "duration" : 275
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "判断时间到了结束弹窗",
      "time" : {
        "start" : 1616937350390,
        "stop" : 1616937410435,
        "duration" : 60045
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击我知道了",
      "time" : {
        "start" : 1616937410435,
        "stop" : 1616937413585,
        "duration" : 3150
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击再学30分钟",
      "time" : {
        "start" : 1616937413585,
        "stop" : 1616937419537,
        "duration" : 5952
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "点击结束",
      "time" : {
        "start" : 1616937419537,
        "stop" : 1616937423285,
        "duration" : 3748
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "确认结束",
      "time" : {
        "start" : 1616937423285,
        "stop" : 1616937426122,
        "duration" : 2837
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "检查是否有计时结束提示框",
      "time" : {
        "start" : 1616937426122,
        "stop" : 1616937482208,
        "duration" : 56086
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: \n\n",
      "statusTrace" : "  File \"D:\\Jenkins\\workspace\\Timing\\scripts\\test_041_studyTime.py\", line 122, in test_studyTimeEnough\n    self.page.classic_timing().tapScreen(0.5,0.63)\n  File \"D:\\Jenkins\\workspace\\Timing\\Pages\\timed_learning\\classic_timing_page.py\", line 124, in tapScreen\n    self.tapOperat(x,y)\n  File \"D:\\Jenkins\\workspace\\Timing\\base\\base_action.py\", line 72, in tapOperat\n    l = self.getSize()\n  File \"D:\\Jenkins\\workspace\\Timing\\base\\base_action.py\", line 51, in getSize\n    x = self.driver.get_window_size()['width']\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1110, in get_window_size\n    size = self.execute(command, {'windowHandle': windowHandle})\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 31, in check_response\n    raise wde\n  File \"c:\\python38\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 26, in check_response\n    super().check_response(response)\n  File \"c:\\python38\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 16,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_041_studyTime"
  }, {
    "name" : "subSuite",
    "value" : "Test_studyTime"
  }, {
    "name" : "host",
    "value" : "WINDOWS-49AO44L"
  }, {
    "name" : "thread",
    "value" : "10292-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_041_studyTime"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "2506017faa628473.json",
  "parameterValues" : [ ]
}