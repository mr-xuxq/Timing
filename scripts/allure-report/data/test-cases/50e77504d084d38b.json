{
  "uid" : "50e77504d084d38b",
  "name" : "test_interaction",
  "fullName" : "test_021_channelCheck.Test_channelCheck#test_interaction",
  "historyId" : "7756e9d1712a198e75d266281d84377e",
  "time" : {
    "start" : 1586251687108,
    "stop" : 1586251730138,
    "duration" : 43030
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <scripts.test_021_channelCheck.Test_channelCheck object at 0x000001F14F1C20F0>\n\n    @allure.story('互动通知channel')\n    def test_interaction(self):\n        with allure.step('进入消息页面'):\n            self.page.message().click_messageBtn()\n            i=0\n            while i < 5000:\n>               self.page.message().click_interaction()\n\ntest_021_channelCheck.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\message_interaction\\message_page.py:25: in click_interaction\n    self.click(self.interaction)\n..\\base\\base_action.py:39: in click\n    self.find_element(feature).click()\n..\\base\\base_action.py:22: in find_element\n    element = WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(feature_by, feature_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"80b9d1eb-adb1-4a3f-bcc4-d7b61a7ae3a9\")>\nmethod = <function BaseAction.find_element.<locals>.<lambda> at 0x000001F150243E18>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <scripts.test_021_channelCheck.Test_channelCheck object at 0x000001F14F1C20F0>\n\n    @allure.story('互动通知channel')\n    def test_interaction(self):\n        with allure.step('进入消息页面'):\n            self.page.message().click_messageBtn()\n            i=0\n            while i < 5000:\n>               self.page.message().click_interaction()\n\ntest_021_channelCheck.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\message_interaction\\message_page.py:25: in click_interaction\n    self.click(self.interaction)\n..\\base\\base_action.py:39: in click\n    self.find_element(feature).click()\n..\\base\\base_action.py:22: in find_element\n    element = WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(feature_by, feature_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"80b9d1eb-adb1-4a3f-bcc4-d7b61a7ae3a9\")>\nmethod = <function BaseAction.find_element.<locals>.<lambda> at 0x000001F150243E18>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ {
      "name" : "进入消息页面",
      "time" : {
        "start" : 1586251687108,
        "stop" : 1586251730138,
        "duration" : 43030
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"D:\\jenkins\\workspace\\Timing\\scripts\\test_021_channelCheck.py\", line 39, in test_interaction\n    self.page.message().click_interaction()\n  File \"D:\\jenkins\\workspace\\Timing\\Pages\\message_interaction\\message_page.py\", line 25, in click_interaction\n    self.click(self.interaction)\n  File \"D:\\jenkins\\workspace\\Timing\\base\\base_action.py\", line 39, in click\n    self.find_element(feature).click()\n  File \"D:\\jenkins\\workspace\\Timing\\base\\base_action.py\", line 22, in find_element\n    element = WebDriverWait(self.driver, timeout, poll).until(lambda x: x.find_element(feature_by, feature_value))\n  File \"d:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "消息页channel展示"
  }, {
    "name" : "story",
    "value" : "互动通知channel"
  }, {
    "name" : "suite",
    "value" : "test_021_channelCheck"
  }, {
    "name" : "subSuite",
    "value" : "Test_channelCheck"
  }, {
    "name" : "host",
    "value" : "PV-X00232293"
  }, {
    "name" : "thread",
    "value" : "4876-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_021_channelCheck"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7f32cbc2ed6d0b9f",
      "status" : "passed",
      "time" : {
        "start" : 1586158964934,
        "stop" : 1586158984541,
        "duration" : 19607
      }
    }, {
      "uid" : "8aaceb4c45a21bc7",
      "status" : "passed",
      "time" : {
        "start" : 1586146742274,
        "stop" : 1586146749126,
        "duration" : 6852
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "50e77504d084d38b.json",
  "parameterValues" : [ ]
}